/**
 * 코드 블럭: {}, if(){}, for(){}
 * 스코프 유효범위 
 */

/**
 * 2번째 강의 
 * 자식 블럭은 접근 가능  내부는 외부 접근 불가 
 */

/**
 * 3번째 강의 쓰레기 수집 (garbage collection)
 * 가비지 콜렉터 
 * 그 누구도 오브젝트를 할당하고 있지 않을 때 가비지 콜렉터로 지워버려 
 * 자바스크립트 엔진 백그라운드 프로세스 
 * 
 *글로벌 변수는 앱이 종료될때까지 계속 메모리에 유지됨
 */

 /**
  * 실행 컨텍스트(execution context )
  * 코드의 실행 순서와 스코프를 기억하고 있음 
  * 각각의 블록은 렉시컬 환경이라는 내부 오브젝트가 있음
  * 얼굴 마사지 
  * 
  * 렉시컬 환경 ) 환경 레코드  
  * 그림 참고해야될듯 ㅇㅅㅇ;; 
  * 스코프 체인이 되어있다 
  * 변수는 최대한 필요한 곳에서 선언을 해야겠다 (온 곳을 찾아다니면서 변수를 찾을 테니까 )
  */

 /**
  * 호이스팅 (HOSTING)
  * 자바스크립트 엔진(인터프리터)이 코드를 실행하기 전에 
  * 변수 함수 클래스의 선언문을 끌어올리는 것을 말함 
  * 
  * 변수 var 쓰지마요
  *  let(값의 재할당이 필수) 
  *  const (값이 재할당이 안될경우 가능한 const사ㅏ용 ) 
  * 
  */

 /**
  * 함수의 js 호이스팅은 함수의 선언문 전에 호출이 가능하게 해줌 
  * 그래서 함수 선언 전에 호출해도 아무 상관 없어 
  * 
  * 변수(let const)와 클래스는 선언만 호이스팅이 되고 초기화는 안됨 
  * 초기화 전 변수에 접근하면 컴파일 에러가남 
  * 
  * 결론 함수는 가능 다른 변수는 안됨 
  * -> 그러나 함수와 클래스를 변수에 할당하며 변수와 같은 방식으로 값 초기화 호이스팅은 안됨 
  * 그니까 변수에 할당에 쓰면 변수처럼 사용됨 
  * 선언까지만 호이팅됨  
  */

 /**
  * var의 특징 (var를 사용하면 안되는 이유 )
  * 일반 코딩 방식과 어긋나서 개발하면서도 멘붕이 옴
  * 코드이 가독성과 유지보수성에 좋지 않음 
  * 
  * 1. 선언인지 재할당인지 구분이 어려움 , 중복 선언이 가능함 
  * 
  * 3. 블록레벨 스코프가 안됨 
  * 
  * 3. 함수 레벨 스코프만 지원됨 
  * 
  */

 /**
  * 엄격 모드 stract mode 
  * 리액트와 같은 프레임워크 사용시 기본적으로 엄격 모드 
  * 'use strict' ; <--이거 쓰면 
  *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
  */

 